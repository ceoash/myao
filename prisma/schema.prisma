// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  rating    Int
  listingId String       @db.ObjectId
  listing   Listing      @relation("reviews", fields: [listingId], references: [id])
  userId    String       @db.ObjectId
  user      User         @relation("reviews", fields: [userId], references: [id])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model Bid {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  price String
  previous String
  listingId String @db.ObjectId
  listing Listing @relation("bids", fields: [listingId], references: [id])
  userId String @db.ObjectId
  user User @relation("bids", fields: [userId], references: [id])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model User {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt @default(now())
  email                  String?           @unique
  name                   String?
  username               String?           @unique
  role                   String?
  emailVerified          DateTime?
  verified               Boolean           @default(false)
  hashedPassword         String?
  type                   String?
  activated              Boolean           @default(false)
  inviter   User?       @relation("UserToUser", fields: [inviterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inviterId String?     @db.ObjectId
  invitees  User[]      @relation("UserToUser")
  options               Json?
  profile                Profile?
  accounts               Account[]
  buyer                  Listing[]         @relation("buyer")
  seller                 Listing[]         @relation("seller")
  sentMessages           Message[]         @relation("SentMessages")
  receivedMessages       Message[]         @relation("ReceivedMessages")
  participant1Conversations Conversation[] @relation("Participant1")
  participant2Conversations Conversation[] @relation("Participant2")
  directMessages            DirectMessage[]
  listingActivity           ListingActivity[]
  followings                Friendship[]      @relation("follower")
  followers                 Friendship[]      @relation("following")
  blockedFriends            Blocked[]         @relation("UserBlocked")
  blockedBy                 Blocked[]         @relation("FriendBlocked")
  messages                  Message[]
  completedBy               Listing[]         @relation("completedBy")
  bids                      Bid[]             @relation("bids")
  activities                Json?
  listings                  Listing[]         @relation("listings")
  reviews                   Review[]          @relation("reviews")
  @@unique([email, username])
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  address  String?
  city     String?
  postcode String?
  image    String?
  website  String?
  bio      String?
  social   Social?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique @db.ObjectId
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  instagram String?
  facebook  String?
  twitter   String?
  youtube   String?
  twitch    String?
  reddit    String?
  linkedin  String?
  tiktok    String?
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique @db.ObjectId
}

model Listing {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  expireAt        DateTime?
  title           String?
  description     String?
  options         Json?
  category        String?
  status          String?
  image           String?
  buyerId         String?           @db.ObjectId
  buyer           User?             @relation("buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId        String            @db.ObjectId
  seller          User              @relation("seller", fields: [sellerId], references: [id], onDelete: Cascade)
  price           String?
  completedById   String?           @db.ObjectId
  completedBy     User?             @relation("completedBy", fields: [completedById], references: [id], onDelete: Cascade)
  messages        Message[]
  listingActivity ListingActivity[]
  directMessages  DirectMessage[]
  bids            Bid[]             @relation("bids")
  activities      Json?
  userId          String            @db.ObjectId
  user            User              @relation("listings", fields: [userId], references: [id], onDelete: Cascade)
  type            String?
  reviews         Review[]          @relation("reviews")
}

model ListingActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  type        String?
  listingId   String   @db.ObjectId
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String?
  image     String?
  listingId String   @db.ObjectId
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyerId   String   @db.ObjectId
  buyer     User     @relation("SentMessages", fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId  String   @db.ObjectId
  seller    User     @relation("ReceivedMessages", fields: [sellerId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String?
  type      String?
  listingId String?   @db.ObjectId
  listing   Listing?  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  image     String?
  userId   String   @db.ObjectId
  user     User     @relation( fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String  @db.ObjectId

}

model Conversation {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  participant1Id String       @db.ObjectId
  participant1   User         @relation("Participant1", fields: [participant1Id], references: [id])
  participant2Id String       @db.ObjectId
  participant2   User         @relation("Participant2", fields: [participant2Id], references: [id])
  directMessages DirectMessage[]
  status     String?        @default("none")
  activities Json?  
  @@unique([participant1Id, participant2Id])
}

model Friendship {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  follower     User     @relation("follower", fields: [followerId], references: [id])
  followerId   String   @db.ObjectId
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  accepted     Boolean  @default(false)
  @@unique([followerId, followingId])
}
model Blocked {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userBlocked     User     @relation("UserBlocked", fields: [userBlockedId], references: [id])
  userBlockedId   String   @db.ObjectId
  friendBlocked   User     @relation("FriendBlocked", fields: [friendBlockedId], references: [id])
  friendBlockedId String   @db.ObjectId
  @@unique([userBlockedId, friendBlockedId])
}
model Invitation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  token           String   @unique
  inviterId       String  
  email           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
