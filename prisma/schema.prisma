// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String?  @unique
  name         String?
  role         String?
  emailVerified DateTime?
  verified     Boolean  @default(false)
  hashedPassword String?
  profile       Profile?
  accounts     Account[]
  sender Listing[] @relation("sender")
  recipient Listing[] @relation("recipient")
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  sentdirectMessages DirectMessage[] @relation("SentDirectMessages")
  receiveddirectMessages DirectMessage[] @relation("ReceivedDirectMessages")
  notifications Notification[]
  NotificationSender Notification[] @relation("NotificationSender")
  listingActivity ListingActivity[]
}

model Profile {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  username String? @unique
  address  String?
  city     String?
  postcode String?
  image    String?
  website  String?
  bio      String?
  social   Social?
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @db.ObjectId @unique
}
model Social {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  instagram  String?
  facebook   String?
  twitter    String?
  youtube  String?
  twitch  String?
  reddit  String?
  linkedin  String?
  tiktok  String?
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @db.ObjectId @unique
}

model Listing {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expireAt     DateTime?
  title        String?
  description  String?
  category     String?
  status       String?
  image        String?
  senderId     String   @db.ObjectId
  sender       User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId  String?  @db.ObjectId
  recipient    User?    @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  price        String?
  bid          String?
  messages     Message[]
  listingActivity   ListingActivity[]

}
model ListingActivity {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  description  String?
  type     String?
  listingId    String   @db.ObjectId
  listing      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  text         String?
  listingId    String   @db.ObjectId
  listing      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  senderId     String   @db.ObjectId
  sender       User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId  String   @db.ObjectId
  recipient    User     @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
}
model DirectMessage {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  text         String?
  senderId     String   @db.ObjectId
  sender       User     @relation("SentDirectMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId  String   @db.ObjectId
  recipient    User     @relation("ReceivedDirectMessages", fields: [recipientId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  message      String
  read         Boolean     @default(false)
  url          String
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  senderId     String      @db.ObjectId
  sender       User        @relation("NotificationSender", fields: [senderId], references: [id])
}